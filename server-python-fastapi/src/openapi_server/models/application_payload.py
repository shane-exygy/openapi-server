# coding: utf-8

"""
    minimal-sample-program

    desc

    The version of the OpenAPI document: 33
    Contact: civiform-dev@exygy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.application_payload_application import ApplicationPayloadApplication
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ApplicationPayload(BaseModel):
    """
    ApplicationPayload
    """ # noqa: E501
    applicant_id: Optional[StrictInt] = None
    application: Optional[ApplicationPayloadApplication] = None
    application_id: Optional[StrictInt] = None
    application_note: Optional[StrictStr] = None
    create_time: Optional[datetime] = None
    language: Optional[StrictStr] = None
    program_name: Optional[StrictStr] = None
    program_version_id: Optional[StrictInt] = None
    revision_state: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    status_last_modified_time: Optional[datetime] = None
    submit_time: Optional[datetime] = None
    submitter_type: Optional[StrictStr] = None
    ti_email: Optional[StrictStr] = None
    ti_organization: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["applicant_id", "application", "application_id", "application_note", "create_time", "language", "program_name", "program_version_id", "revision_state", "status", "status_last_modified_time", "submit_time", "submitter_type", "ti_email", "ti_organization"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ApplicationPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # set to None if application_note (nullable) is None
        # and model_fields_set contains the field
        if self.application_note is None and "application_note" in self.model_fields_set:
            _dict['application_note'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if status_last_modified_time (nullable) is None
        # and model_fields_set contains the field
        if self.status_last_modified_time is None and "status_last_modified_time" in self.model_fields_set:
            _dict['status_last_modified_time'] = None

        # set to None if ti_email (nullable) is None
        # and model_fields_set contains the field
        if self.ti_email is None and "ti_email" in self.model_fields_set:
            _dict['ti_email'] = None

        # set to None if ti_organization (nullable) is None
        # and model_fields_set contains the field
        if self.ti_organization is None and "ti_organization" in self.model_fields_set:
            _dict['ti_organization'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ApplicationPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicant_id": obj.get("applicant_id"),
            "application": ApplicationPayloadApplication.from_dict(obj.get("application")) if obj.get("application") is not None else None,
            "application_id": obj.get("application_id"),
            "application_note": obj.get("application_note"),
            "create_time": obj.get("create_time"),
            "language": obj.get("language"),
            "program_name": obj.get("program_name"),
            "program_version_id": obj.get("program_version_id"),
            "revision_state": obj.get("revision_state"),
            "status": obj.get("status"),
            "status_last_modified_time": obj.get("status_last_modified_time"),
            "submit_time": obj.get("submit_time"),
            "submitter_type": obj.get("submitter_type"),
            "ti_email": obj.get("ti_email"),
            "ti_organization": obj.get("ti_organization")
        })
        return _obj


